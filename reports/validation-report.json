[
  {
    "validator": "architecture-violation-detection",
    "passed": false,
    "message": "Some checks failed",
    "details": [
      "test/architecture-violations.js: Found 24 architecture violation(s):\n\n  Line 8: Direct eventBus.emit() call bypasses musical sequence architecture (Confidence: 100%)\n    Code: eventBus.emit('button-clicked', { id: 'submit-btn' });\n    ðŸ’¡ Use MusicalSequences.start{ComponentName}Flow() instead\n    ðŸ”§ Auto-fix: MusicalSequences.startButton-clickedFlow()\n\n  Line 8: Generic .emit() pattern detected - verify compliance (Confidence: 90%)\n    Code: eventBus.emit('button-clicked', { id: 'submit-btn' });\n    ðŸ’¡ Ensure all event emissions flow through musical sequences\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 14: conductor.emitEvent() bypasses proper beat execution (Confidence: 100%)\n    Code: conductor.emitEvent('canvas-drag-start', { x: 100, y: 200 });\n    ðŸ’¡ Use conductor.executeBeat() within sequence definition\n    ðŸ”§ Auto-fix: conductor.executeBeat({ eventType: \"canvas-drag-start\", data: {} })\n\n  Line 19: Direct conductor.executeMovement() call outside sequence context (Confidence: 95%)\n    Code: conductor.executeMovement('drag-movement', { duration: 500 });\n    ðŸ’¡ executeMovement() should only be called within sequence definitions\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 24: conductor.executeBeat() called outside sequence beat context (Confidence: 95%)\n    Code: conductor.executeBeat('drag-end-beat');\n    ðŸ’¡ executeBeat() should only be called within sequence beat definitions\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 29: Incorrect EventBus method - RenderX EventBus uses subscribe/unsubscribe pattern (Confidence: 95%)\n    Code: eventBus.on('canvas-ready', handleCanvasReady);\n    ðŸ’¡ Replace eventBus.on() with eventBus.subscribe() and use returned unsubscribe function\n    ðŸ”§ Auto-fix: eventBus.subscribe('canvas-ready', handleCanvasReady);\n\n  Line 30: Incorrect EventBus method - RenderX EventBus uses subscribe/unsubscribe pattern (Confidence: 95%)\n    Code: eventBus.addEventListener('resize', handleResize);\n    ðŸ’¡ Replace eventBus.on() with eventBus.subscribe() and use returned unsubscribe function\n    ðŸ”§ Auto-fix: Use eventBus.subscribe() instead\n\n  Line 31: Incorrect EventBus method - RenderX EventBus uses subscribe/unsubscribe pattern (Confidence: 95%)\n    Code: eventBus.off('old-event', oldHandler);\n    ðŸ’¡ Replace eventBus.on() with eventBus.subscribe() and use returned unsubscribe function\n    ðŸ”§ Auto-fix: Use eventBus.subscribe() instead\n\n  Line 36: Static EventBus.emit() call bypasses instance-based architecture (Confidence: 90%)\n    Code: EventBus.emit('global-state-change', newState);\n    ðŸ’¡ Use eventBus instance through MusicalSequences API\n    ðŸ”§ Auto-fix: Use eventBus instance: eventBus.emit()\n\n  Line 36: Generic .emit() pattern detected - verify compliance (Confidence: 85%)\n    Code: EventBus.emit('global-state-change', newState);\n    ðŸ’¡ Ensure all event emissions flow through musical sequences\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 41: Generic .emit() pattern detected - verify compliance (Confidence: 85%)\n    Code: myEmitter.emit('custom-event', data);\n    ðŸ’¡ Ensure all event emissions flow through musical sequences\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 42: Generic .emit() pattern detected - verify compliance (Confidence: 85%)\n    Code: this.emit('instance-event', payload);\n    ðŸ’¡ Ensure all event emissions flow through musical sequences\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 47: Custom event dispatch bypasses musical sequence architecture (Confidence: 90%)\n    Code: dispatchEvent(new CustomEvent('my-event'));\n    ðŸ’¡ Use MusicalSequences API for all event coordination\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 48: Custom event dispatch bypasses musical sequence architecture (Confidence: 90%)\n    Code: fireEvent('legacy-event', data);\n    ðŸ’¡ Use MusicalSequences API for all event coordination\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 49: Custom event dispatch bypasses musical sequence architecture (Confidence: 90%)\n    Code: triggerEvent('manual-trigger');\n    ðŸ’¡ Use MusicalSequences API for all event coordination\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 50: Custom event dispatch bypasses musical sequence architecture (Confidence: 90%)\n    Code: sendEvent('notification', message);\n    ðŸ’¡ Use MusicalSequences API for all event coordination\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 55: Custom event dispatch bypasses musical sequence architecture (Confidence: 90%)\n    Code: document.dispatchEvent(new Event('dom-ready'));\n    ðŸ’¡ Use MusicalSequences API for all event coordination\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 55: Direct DOM event dispatch bypasses component architecture (Confidence: 90%)\n    Code: document.dispatchEvent(new Event('dom-ready'));\n    ðŸ’¡ Use component-level event handling through musical sequences\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 60: Custom event dispatch bypasses musical sequence architecture (Confidence: 90%)\n    Code: window.dispatchEvent(new Event('app-ready'));\n    ðŸ’¡ Use MusicalSequences API for all event coordination\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 60: Window-level event dispatch detected - verify necessity (Confidence: 85%)\n    Code: window.dispatchEvent(new Event('app-ready'));\n    ðŸ’¡ Consider using musical sequences for component communication\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 61: Window-level event dispatch detected - verify necessity (Confidence: 85%)\n    Code: window.postMessage({ type: 'cross-frame' }, '*');\n    ðŸ’¡ Consider using musical sequences for component communication\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 83: Direct eventBus.emit() call bypasses musical sequence architecture (Confidence: 100%)\n    Code: eventBus.emit(  'spaced-event'  ,   data   );\n    ðŸ’¡ Use MusicalSequences.start{ComponentName}Flow() instead\n    ðŸ”§ Auto-fix: MusicalSequences.startSpaced-eventFlow()\n\n  Line 83: Generic .emit() pattern detected - verify compliance (Confidence: 90%)\n    Code: eventBus.emit(  'spaced-event'  ,   data   );\n    ðŸ’¡ Ensure all event emissions flow through musical sequences\n    ðŸ”§ Auto-fix: Use MusicalSequences API for event coordination\n\n  Line 86: conductor.emitEvent() bypasses proper beat execution (Confidence: 100%)\n    Code: conductor.emitEvent('single-quote-event', payload);\n    ðŸ’¡ Use conductor.executeBeat() within sequence definition\n    ðŸ”§ Auto-fix: conductor.executeBeat({ eventType: \"single-quote-event\", data: {} })"
    ]
  }
]